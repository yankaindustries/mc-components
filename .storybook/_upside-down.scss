// This file contains the styles
// and overrides that need to be integrated
// more cleanly.  We don't know where to put them
// yet, so they'll live here!

// THE UPSIDE DOWN

.mc-card {
  padding: $grid-gutter-width-xl / 2;
  border-radius: 3px;

  &--equal-height {
    height: 100%;
  }

  &__image {
    margin-left: $grid-gutter-width-xl / -2;
    margin-right: $grid-gutter-width-xl / -2;
    width: calc(100% + #{$grid-gutter-width-xl});
  }
}

pre {
  font-family: monospace;
}

hr {
  height: 1px;
  border: none;
  background: $mc-color-gray-100;
  @include step(margin-top, 4);
  @include step(margin-bottom, 4);

  .mc-invert & {
    background: $mc-color-gray-600;
  }
}

a {
  color: inherit;
}

.img--responsive {
  max-width: 100%;
}

.hljs {
  border-radius: 6px;
}

.example__heading {
  @include step(margin-top, 8);
  @include step(margin-bottom, 8);
}

.example__section {
  @include step(margin-top, 8);
  @include step(margin-bottom, 10);
}

.example__definition {
  @include step(margin-bottom, 5);
}

.example__render {
  @include step(padding-top, 4);
  @include step(padding-bottom, 4);
  @include step(margin-bottom, 4);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);

  .mc-invert & {
    border-bottom-color: rgba(0, 0, 0, 0.1)
  }
}

.example__trigger {
  @include step(margin-bottom, 4);
}

.example__code {
  @include step(margin-bottom, 4);
}

.example__table {
  width: 100%;
  border-collapse: collapse;
  text-align: left;

  tbody {
    tr {
      border-top: 1px solid rgba(255, 255, 255, 0.08);
      border-bottom: 1px solid rgba(255, 255, 255, 0.08);
    }
  }

  th {
    font-weight: 900;
  }

  th, td {
    @include step(padding, 2);
  }
}

.example-placeholder {
  position: absolute;
  left: 0; top: 0;
  right: 0; bottom: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: -1;

  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.08);
}

.example-mc-swatches {
  display: flex;
  flex-wrap: wrap;
}

.example-mc-swatch {
  display: flex;
  align-items: center;

  $colors: (
    mc-color-light: $mc-color-light,
    mc-color-dark: $mc-color-dark,
    mc-color-primary: $mc-color-primary,
    mc-color-primary-hover: $mc-color-primary-hover,
    mc-color-primary-active: $mc-color-primary-active,
    mc-color-secondary: $mc-color-secondary,
    mc-color-secondary-hover: $mc-color-secondary-hover,
    mc-color-secondary-active: $mc-color-secondary-active,
    mc-color-tertiary: $mc-color-tertiary,
    mc-color-tertiary-hover: $mc-color-tertiary-hover,
    mc-color-background: $mc-color-background,
    mc-color-background-invert: $mc-color-background-invert,
    mc-color-text: $mc-color-text,
    mc-color-text-invert: $mc-color-text-invert,
    mc-color-gray-100: $mc-color-gray-100,
    mc-color-gray-200: $mc-color-gray-200,
    mc-color-gray-300: $mc-color-gray-300,
    mc-color-gray-400: $mc-color-gray-400,
    mc-color-gray-500: $mc-color-gray-500,
    mc-color-gray-600: $mc-color-gray-600,
    mc-color-error: $mc-color-error,
    mc-color-warning: $mc-color-warning
  );

  @each $colorKey, $colorVal in $colors {
    // .example-mc-swatch--mc-color-primary
    &--#{$colorKey} {
      .example-mc-swatch {
        &__color {
          background-color: #{$colorVal};
        }

        &__hex:before {
          content: '#{$colorVal}';
        }
      }
    }
  }

  &__color {
    display: block;
    width: 35px;
    height: 35px;
    margin-right: 12px;
    border-radius: 5px;
    border: 1px solid $mc-color-gray-100;
    flex-shrink: 0;

  }
}

.example-mc-step {
  @for $i from 1 through 16 {
    &__box {
      display: inline-block;
      background: $mc-color-primary;
    }

    &__box-#{$i} {
      @include step(width, $i);
      @include step(height, $i);
    }

    $rem-sm: calc-step($i, $mc-step-decay-sm);
    $rem-md: calc-step($i, $mc-step-decay-md);
    $rem-lg: calc-step($i, $mc-step-decay-lg);

    &__label-#{$i}-sm-px:before {
      content: "#{$rem-sm * $mc-step-base}";
    }

    &__label-#{$i}-sm-rem:before {
      content: "#{$rem-sm}";
    }

    &__label-#{$i}-sm-em:before {
      content: "#{$rem-sm * $mc-step-base / (4 * $mc-step-scale)}";
    }

    &__label-#{$i}-md-px:before {
      content: "#{$rem-md * $mc-step-base}";
    }

    &__label-#{$i}-md-rem:before {
      content: "#{$rem-md}";
    }

    &__label-#{$i}-md-em:before {
      content: "#{$rem-md * $mc-step-base / (4 * $mc-step-scale)}";
    }

    &__label-#{$i}-lg-px:before {
      content: "#{$rem-lg * $mc-step-base}";
    }

    &__label-#{$i}-lg-rem:before {
      content: "#{$rem-lg}";
    }

    &__label-#{$i}-lg-em:before {
      content: "#{$rem-lg * $mc-step-base / (4 * $mc-step-scale)}";
    }
  }
}

// Inline variables magically, thanks @jones for
// the idea. You're so smart.
 .mc-gutter-value {
  &:before {
    content: "#{$grid-gutter-width}";
  }

  &--xl:before {
    content: "#{$grid-gutter-width-xl}";
  }
 }

.mc-bp-value {
  &--xs:before {
    content: "#{$mc-bp-xs}";
  }

  &--sm:before {
    content: "#{$mc-bp-sm}";
  }

  &--md:before {
    content: "#{$mc-bp-md}";
  }

  &--lg:before {
    content: "#{$mc-bp-lg}";
  }

  &--xl:before {
    content: "#{$mc-bp-xl}";
  }
}


.d-inline-block {
  display: inline-block;
}

@mixin mc-button {
  @include step(padding-top, 3);
  @include step(padding-right, 5);
  @include step(padding-bottom, 3);
  @include step(padding-left, 5);
  @include step(font-size, 3);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  color: $mc-color-light;
  font-weight: 700;
  line-height: 2;
  letter-spacing: 0.12em;
  text-transform: uppercase;
  border-radius: $default-radius;
  transition:
    background 250ms ease,
    box-shadow 250ms ease,
    opacity 250ms ease;
  vertical-align: middle;

  &:focus,
  &.focus {
    outline: 0;
  }

  &.disabled,
  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }

  // TYPES

  &--full-width {
    width: 100%;
  }

  &--with-icon {
    display: flex;
    align-self: center;
    justify-content: center;

    span {
      margin-left: 1.3rem;
    }
  }

  &--loading {
    position: relative;
    pointer-events: none;

    .c-button__content {
      opacity: 0;
    }

    .c-button__loader {
      position: absolute;
      top: 50%;
      left: 50%;
      margin: -1em;

      @include spin;
    }
  }

  &--primary {
    background-color: $mc-color-primary;

    &:not(:disabled):not(.disabled) {
      &:hover {
        background: $mc-color-primary-hover;
        // Needed to override old previously defined
        // hover color in masterclass repo
        color: $mc-color-light;
      }

      &:active {
        background: $mc-color-primary-active;
      }
    }
  }

  &--secondary {
    background: $mc-color-gray-200;

    &:not(:disabled):not(.disabled) {
      &:hover {
        background: $mc-color-gray-300;
      }

      &:active {
        background: $mc-color-gray-200;
      }
    }
  }

  &--tertiary {
    background: none;
    box-shadow: inset 0 0 0 1px rgba($mc-color-light, 0.5);

    &:not(:disabled):not(.disabled) {
      &:hover {
        background: none;
        box-shadow: inset 0 0 0 1px $mc-color-light;
      }

      &:active {
        background: none;
        box-shadow: inset 0 0 0 1px rgba($mc-color-light, 0.5);
      }
    }

    .mc-invert & {
      box-shadow: inset 0 0 0 1px rgba($mc-color-dark, 0.5);
      color: $mc-color-dark;

      &:not(:disabled):not(.disabled) {
        &:hover {
          box-shadow: inset 0 0 0 1px $mc-color-dark;
        }

        &:active {
          box-shadow: inset 0 0 0 1px rgba($mc-color-dark, 0.5);
        }
      }
    }
  }

  &--link {
    background: none;
    color: $mc-color-light;

    span {
      position: relative;

      &:after {
        position: absolute;
        bottom: -4px;
        left: 0;
        content: "";
        display: block;
        width: 100%;
        height: 1px;
        pointer-events: none;
        background: $mc-color-light;
        opacity: 0;
        transition: opacity 250ms cubic-bezier(0.25, 0.1, 0.25, 1);
      }
    }

    &:not(:disabled):not(.disabled) {
      &:hover {
        opacity: 0.8;
      }

      &:active {
        opacity: 1;
      }
    }

    .mc-invert & {
      color: $mc-color-dark;

      span {
        &:after {
          background: $mc-color-dark;
        }
      }
    }
  }

  &--symmetrical {
    @include step(padding, 3);
  }

  &--google {
    background-color: $mc-color-google;

    &:not(:disabled):not(.disabled) {
      &:hover {
        background-color: lighten($mc-color-google, 6.5%);
      }

      &:active {
        background-color: $mc-color-google;
      }
    }
  }

  &--facebook {
    background-color: $mc-color-facebook;

    &:not(:disabled):not(.disabled) {
      &:hover {
        background-color: lighten($mc-color-facebook, 6.5%);
      }

      &:active {
        background-color: $mc-color-facebook;
      }
    }
  }

  &--twitter {
    background-color: $mc-color-twitter;

    &:not(:disabled):not(.disabled) {
      &:hover {
        background-color: lighten($mc-color-twitter, 6.5%);
      }

      &:active {
        background-color: $mc-color-twitter;
      }
    }
  }

  &--pinterest {
    background-color: $mc-color-pinterest;

    &:not(:disabled):not(.disabled) {
      &:hover {
        background-color: lighten($mc-color-pinterest, 6.5%);
      }

      &:active {
        background-color: $mc-color-pinterest;
      }
    }
  }

  &--paypal {
    background-color: $mc-color-paypal;
    color: $mc-color-dark;

    &:not(:disabled):not(.disabled) {
      &:hover {
        background-color: lighten($mc-color-paypal, 6.5%);
        color: $mc-color-dark;
      }

      &:active {
        background-color: $mc-color-paypal;
        color: $mc-color-dark;
      }
    }
  }

  &--success {
    background-color: $mc-color-success;

    &:not(:disabled):not(.disabled) {
      &:hover {
        background-color: lighten($mc-color-success, 6.5%);
      }

      &:active {
        background-color: $mc-color-success;
      }
    }
  }

  &--applepay {
    background-color: $mc-color-applepay;
    color: $mc-color-dark;

    &:not(:disabled):not(.disabled) {
      &:hover {
        background-color: lighten($mc-color-applepay, 6.5%);
        color: $mc-color-dark;
      }

      &:active {
        background-color: $mc-color-applepay;
        color: $mc-color-dark;
      }
    }

    .mc-invert & {
      box-shadow: inset 0 0 0 1px $mc-color-dark;
    }
  }
}

.c-button {
  @include mc-button;
}
